/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rev(ListNode* temp){ // Recursive method for linked list reversal, can use iterative also
        if(temp == NULL || temp->next == nullptr)return temp;
        ListNode* newHead = rev(temp->next);
        ListNode* front = temp->next;
        front->next = temp;
        temp->next = nullptr;
        return newHead;
    }
    ListNode* findKthNode(ListNode* temp,int k){ // Finding kth node from temp(current) node
        for(int i=1;i<k;i++){
            temp = temp->next;
            if(temp == NULL)return NULL; // If Kth node is NULL, then we stop the while loop altogether since we dont have enough nodes to reverse
        }
        return temp;
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* temp = head;
        ListNode* prevNode = NULL; // To keep track of last node of reversed list
        while(temp != NULL){
            ListNode* kthNode = findKthNode(temp,k); // Finding kth node from the current node
            if(kthNode == NULL){ // If Kth node is NULL, then we stop the while loop altogether since we dont have enough nodes to reverse
                prevNode->next = temp;
                break;
            }
            ListNode* nextNode = kthNode->next; // Storing the rest of the nodes so they are not lost
            kthNode->next = nullptr; // To reverse, we need to make the temp list free from links
            rev(temp);
            if(temp == head){ // First Iteration
                head =  kthNode; //Assigning first node of first reversed list as new head
            }
            else{
                prevNode->next = kthNode; // Joining first node of reversed list with trailing list
            }
            prevNode = temp; // Bringing last node of reversed list to current node
            temp = nextNode; // Moving current node forward for further processing
        }
        return head;
    }
};
