/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        Node* temp = head;
        while(temp){ // Step 1. Insert copy nodes in middle
            Node* copyNode = new Node(temp->val);
            copyNode->next = temp->next;
            temp->next = copyNode;
            temp = temp->next->next;
        }
        temp = head;
        while(temp){ // Step 2. Assign random pointer to copy nodes
            Node* copyNode = temp->next;
            if(temp->random){
                copyNode->random = temp->random->next;
            }else copyNode->random = nullptr;
            temp = temp->next->next;
        }
        Node* dummyNode = new Node(-1); // Assigning a dummy node for new List
        Node* res = dummyNode; // dummy list mover
        temp = head;
        while(temp){ // Step 3. connecting new nodes together and connecting back orignal list and thus finally obtaining the new list
            res->next = temp->next;
            temp->next = temp->next->next;
            res = res->next;
            temp = temp->next;
        }
        return dummyNode->next;
    }
};
