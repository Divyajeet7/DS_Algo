/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        if(head == NULL || head->next == nullptr)return head;

        ListNode* left = new ListNode(-1);
        ListNode* right = new ListNode(-1);

        ListNode* leftTail = left;
        ListNode* rightTail = right;

        while(head){
            if(head->val < x){
                leftTail->next = head; // Since we are not using new keyword, and just moving the pointers, we are not using up extra space , hence space complexity O(1)
                leftTail = leftTail->next;
            }
            else{
                rightTail->next = head;
                rightTail = rightTail->next;
            }
            head = head->next;
        }
        leftTail->next = right->next;
        rightTail->next = nullptr;
        return left->next;
    }
};
