/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* getMiddle(ListNode* head){ // Tortoise hare algo to find middle of linked list
        if(head == NULL || head->next == nullptr)return head;
        ListNode* slow = head;
        ListNode* fast = head->next; // A slight modification because tortoise hare returns the second middle if no of nodes are even, we need first middle
        while(fast && fast->next){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    ListNode* merge2(ListNode* list1,ListNode* list2){
        if(list1 == NULL)return list2;
        if(list2 == NULL)return list1;
        ListNode* third = NULL;
        ListNode* last = NULL;
        if(list1->val < list2->val){
            third = list1;
            last = list1;
            list1 = list1->next;
            last->next = nullptr;
        }
        else{
            third = list2;
            last = list2;
            list2 = list2->next;
            last->next = nullptr;
        }
        while(list1 != NULL && list2 != NULL){
            if(list1->val < list2->val){
            last->next = list1;
            last = list1;
            list1 = list1->next;
            last->next = nullptr;
        }
        else{
            last->next = list2;
            last = list2;
            list2 = list2->next;
            last->next = nullptr;
        }
        }
        if(list1 != NULL){
            last->next = list1;
        }
        else{
            last->next = list2;
        }
        return third;
    }
    ListNode* sortList(ListNode* head) {
        if(head == NULL || head->next == nullptr)return head;
        //Optimal Merge Sort algorithm
        ListNode* middle = getMiddle(head);
        ListNode* left = head;
        ListNode* right = middle->next;
        middle->next = nullptr;
        left = sortList(left);
        right = sortList(right);
        return merge2(left,right);
    }
};
